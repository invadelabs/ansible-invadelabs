---
- hosts: drew-serv
  become: true
  become_method: sudo
  gather_facts: no
  vars:
    MAILTO: drew@invadelabs.com

  tasks:
  # waiting for fedora 28 stable packages, test available
  # - name: Add docker-ce repo
  #   command: |
  #     sudo dnf config-manager --add-repo \
  #     https://download.docker.com/linux/fedora/docker-ce.repo
  #   args:
  #     creates: /etc/yum.repos.d/docker-ce.repo

  - name: Install etckeeper
    dnf: name=etckeeper state=present

  - name: Initalize etckeeper
    command: etckeeper init
    args:
      chdir: /etc
      creates: /etc/.git

  - name: Install Base Packages
    dnf: name={{item}} state=present
    with_items:
    - docker # docker-ce when fedora 28 stable pkgs are available
    # base
    - chrony
    - mcelog
    - cronie # crontab
    - lldpd
    - samba
    - httpd
    - postfix
    - mailx
    - screen
    - smartmontools
    - lm_sensors
    - git # for github.com/invadelabs/cron-invadelabs
    - bc # for github.com/invadelabs/cron-invadelabs
    - bind-utils # for dig
    - dnf-plugins-core # for docker install
    - snapd # for drive
    # python
    - python-dnf # for ansible
    - python2-pip # for ansible docker module
    - python2-virtualenv # for ansible docker module
    - libselinux-python # for ansible
    # nagios
    - nrpe
    - nagios-plugins-users
    - nagios-plugins-load
    - nagios-plugins-disk
    - nagios-plugins-procs
    # qemu-kvm
    - qemu-kvm
    - libvirt
    - virt-install
    - bridge-utils
    - libguestfs-tools
    notify:
    - Start docker
    - Start chronyd
    - Start mcelog
    - Start lldpd
    - Start smb
    - Start nmb
    - Start httpd
    - Start postfix
    - Start nrpe
    - Start libvirtd
    - Setup lm_sensors

  - name: smartd mail root
    lineinfile:
      dest: /etc/sysconfig/smartmontools
      regexp: "^smartd_conf_opts="
      line: 'smartd_conf_opts="-H -m root"'
      state: present
    notify: Restart smartd.service

  - name: Disallow root SSH access
    lineinfile:
      dest: /etc/ssh/sshd_config
      regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
      state: present
      validate: '/usr/sbin/sshd -t -f %s'
    notify: Restart sshd.service

  - name: Add /etc/motd template
    template:
      src: templates/etc/motd.j2
      dest: /etc/motd

  - name: Add /etc/nrpe.d/nrpe_local.cfg template
    template:
      src: templates/etc/nrpe.d/nrpe_local.cfg.j2
      dest: /etc/nrpe.d/nrpe_local.cfg
    notify: Restart nrpe.service

  - name: Set SELinux to permissive
    selinux:
      policy: targeted
      state: permissive

  - name: Ensure group "docker" exists
    group:
      name: docker
      state: present

  - name: Append drew to docker group
    user:
      name: drew
      uid: 1000 # 1001 on invadelabs, fix this
      groups: docker
      append: yes

  - name: Ensure drew is in sudoers
    lineinfile:
      path: /etc/sudoers
      state: present
      regexp: '^drew ALL='
      line: 'drew ALL=(ALL) NOPASSWD: ALL'
      validate: '/usr/sbin/visudo -cf %s'

  - name: git clone --depth 1 invadelabs.com/cron-invadelabs
    git:
      repo: https://github.com/invadelabs/cron-invadelabs.git
      dest: /root/scripts
      depth: 1

  - name: Install docker-py pip module
    pip:
      name: docker-py

  - name: Symlink /var/lib/snapd/snap to /snap
    file:
      src: /var/lib/snapd/snap
      dest: /snap
      owner: root
      group: root
      state: link

  - name: Install drive via snap
    command: snap install drive --classic
    args:
      creates: /var/lib/snapd/snap/bin/drive

  # when / if this fails drive is not initialized! `cd /root; drive init`
  - name: Get nagios-bkup-latest.tar.xz backup
    shell: |
      /var/lib/snapd/snap/bin/drive pull -piped $(/var/lib/snapd/snap/bin/drive ls Backup/Web | grep nagios-drewserv | grep -v sha256 | sort | tail -n 1 | cut -c 2-) > /home/drew/nagios-bkup-latest.tar.xz
    args:
      chdir: /root
      creates: /home/drew/nagios-bkup-latest.tar.xz
    notify:
    - Extract nagios-bkup-latest.tar.xz
    - Create container nagios4

  - name: Add cron check_ddns.sh
    cron:
      name: check_ddns.sh
      minute: "*/5"
      user: root
      job: /root/scripts/check_ddns.sh

  - name: Add cron gdrive_backup.sh
    cron:
      name: gdrive_backup.sh
      minute: "0"
      hour: "23"
      user: root
      job: /root/scripts/gdrive_backup.sh -a nagios-drewserv -d /var/lib/snapd/snap/bin -f Backup/Web -l /root/scripts/gdrive_backup_nagios-drewserv.txt -s

  - name: Add cron check_docker.sh
    cron:
      name: check_docker.sh
      minute: "*/1"
      user: root
      job: /root/scripts/check_docker.sh

  - name: Notify message to place check_dns.cred and slacktee.conf
    debug:
      msg: "Place check_dns.cred and slacktee.conf"

  handlers:
   - name: Start docker
     service: name=docker state=started enabled=yes
   # base
   - name: Start chronyd
     service: name=chronyd state=started enabled=yes
   - name: Start mcelog
     service: name=mcelog state=started enabled=yes
   - name: Start lldpd
     service: name=lldpd state=started enabled=yes
   - name: Start smb
     service: name=smb state=started enabled=yes
   - name: Start nmb
     service: name=nmb state=started enabled=yes
   - name: Start httpd
     service: name=httpd state=started enabled=yes
   - name: Start postfix
     service: name=postfix state=started enabled=yes
   # nagios
   - name: Start nrpe
     service: name=nrpe state=started enabled=yes
   # kvm
   - name: Start libvirtd
     service: name=libvirtd state=started enabled=yes

   - name: Setup lm_sensors
     command: sensors-detect --auto

   - name: Restart smartd.service
     service: name=smartd state=restarted
   - name: Restart sshd.service
     service: name=sshd state=restarted
   - name: Restart nrpe.service
     service: name=nrpe state=restarted

   - name: Extract nagios-bkup-latest.tar.xz
     unarchive:
       src: /home/drew/nagios-bkup-latest.tar.xz
       dest: /home/drew
       remote_src: yes

   - name: Create container nagios4
     docker_container:
       name: nagios4
       image: jasonrivers/nagios:latest
       state: started
       restart_policy: unless-stopped
       volumes:
         - /home/drew/nagios/etc:/opt/nagios/etc
         - /home/drew/nagios/var:/opt/nagios/var
         - /home/drew/nagios/Custom-Nagios-Plugins:/opt/Custom-Nagios-Plugin
         - /home/drew/nagios/nagiosgraph/var:/opt/nagiosgraph/var
       ports:
         - "0.0.0.0:8080:80"

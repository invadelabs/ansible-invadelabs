---
- hosts: nm1
  become: true
  become_method: sudo
  # gather_facts: no
  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    nexus_repo: "http://192.168.1.125:8081/repository"
    nrpe_allowed_hosts: "192.168.1.0/24,172.17.0.0/16,127.0.0.1,::1"
    rsyslog_host: "192.168.1.125"
    rsyslog_port: "10514"
    docker_bridge: "172.17.0.0/16" # XXX to-do enforce this
    monitor_containers: "pihole \
                         nightscout \
                         nexus \
                         docker-elk_logstash_1 \
                         docker-elk_kibana_1 \
                         docker-elk_elasticsearch_1 \
                         nightscout \
                         mosquitto \
                         zigbee2mqtt \
                         ring-mqtt \
                         homeassistant \
                         influxdb \
                         grafana \
                         zoneminder"

  tasks:
  - include: playbooks/preflight_check.yml # fail if missing secrets

  - include: playbooks/initial.yml # etckeeper, fail2ban, ansible bits

  - include: playbooks/pkgs_fedora.yml
    when: ansible_os_family == "RedHat"
  - include: playbooks/pkgs_debian.yml
    when: ansible_os_family == "Debian"

  - include: playbooks/pip.yml

  - include: playbooks/firewall.yml
  - include: playbooks/logging.yml

  - include: playbooks/selinux.yml # hardware specifics
    when: ansible_host == "drew-serv"
  - include: playbooks/hw_drew-serv.yml # hardware specifics
    when: ansible_host == "drew-serv"
  # - include: playbooks/hw_rpi.yml # hardware specifics
  #   when: "'debian-arm' in group_names"
  - include: playbooks/samba.yml # samba
    when: ansible_host == "drew-serv"
  - include: playbooks/httpd.yml # reverse https proxy for nagios/cgm/ha
    when: ansible_host == "drew-serv"
  - include: playbooks/postfix.yml # postfix server
    when: ansible_host == "drew-serv"
  - include: playbooks/postfix_relay.yml # postfix config for relay
    when: (ansible_host != "drew-serv")

  - include: playbooks/ntop.yml # ntop network monitoring
    when: ansible_host == "drew-piv3"

  - include: playbooks/nut_ups.yml # NUT UPS config
    when: ansible_host == "drew-piv3"

  # - include: playbooks/rpi-cluster.yml
  #   when: "'rpi-cluster' in group_names"

  - include: playbooks/docker.yml
  - include: playbooks/sshd_config.yml
  - include: playbooks/nrpe.yml
  - include: playbooks/cron.yml
  - include: playbooks/dashboard.yml
    when: ansible_host == "drew-piv4"

  - name: docker; rclone get drew-serv-bkup-latest.tar.xz backup
    shell: |
      rclone copyto googledrive:/Backup/Web/$(rclone ls googledrive:/Backup/Web 2>&1 | awk -F" " '{ print $2 }' | grep -E '^drew-serv.*.tar.xz$' | sort | tail -n 1) /srv/drew-serv-bkup-latest.tar.xz
    args:
      creates: /srv/drew-serv-bkup-latest.tar.xz
    when: ansible_host == "drew-serv"
    notify:
    - docker; extract drew-serv-bkup-latest.tar.xz
    - docker; create container nagios4
    - docker; create container pihole
    - docker; create container nightscout
    - docker; create container nexus
    - docker; create container mosquitto
    - docker; create container zigbee2mqtt
    - docker; create container ring-mqtt
    - docker; create container homeassistant
    - docker; create container influxdb
    - docker; create container grafana
    - docker; create container zoneminder

## HANDLERS ##
  handlers:
  - include: playbooks/handlers.yml # start / restart systemd stuff, other things

  ## Docker Handlers
  - name: docker; extract drew-serv-bkup-latest.tar.xz
    unarchive:
      src: /srv/drew-serv-bkup-latest.tar.xz
      dest: /srv
      remote_src: yes
      # system_u:object_r:container_file_t
      setype: container_file_t
      serole: object_r
      seuser: system_u
    when: ansible_host == "drew-serv"

  - name: docker; create container nagios4
    docker_container:
      name: nagios4
      image: jasonrivers/nagios:4.4.4
      state: started
      restart_policy: unless-stopped
      hostname: nagios.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/nagios4/etc:/opt/nagios/etc:z"
        - "/srv/nagios4/var:/opt/nagios/var:z"
        - "/srv/nagios4/Custom-Nagios-Plugins:/opt/Custom-Nagios-Plugins:z"
        - "/srv/nagios4/nagiosgraph/var:/opt/nagiosgraph/var:z"
        - "/srv/nagios4/nagiosgraph/etc:/opt/nagiosgraph/etc:z"
        - "/srv/nagios4/main.cf:/etc/postfix/main.cf:z"
        - "/srv/nagios4/nagios.conf:/etc/apache2/sites-available/nagios.conf:z"
      env: {
        "MAIL_RELAY_HOST": "192.168.1.125",
        "NAGIOS_FQDN": "nagios.invadelabs.com",
        "NAGIOS_TIMEZONE": "America/Denver"
        }
      ports:
        - "8080:80/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container pihole
    docker_container:
      name: pihole
      image:  pihole/pihole:v5.1.2
      state: started
      restart_policy: unless-stopped
      hostname: pihole.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/pihole/etc-pihole:/etc/pihole:z"
        - "/srv/pihole/etc-dnsmasq.d:/etc/dnsmasq.d:z"
      ports:
        - "{{ ansible_enp0s25.ipv4.address }}:53:53/tcp"
        - "{{ ansible_enp0s25.ipv4.address }}:53:53/udp"
        - "6080:80/tcp"
      env:
        TZ: "America/Denver"
      dns_servers:
        - 127.0.0.1
        - 1.1.1.1
    when: ansible_host == "drew-serv"

  - name: docker; create container nightscout
    docker_container:
      name: nightscout
      image: nightscout/cgm-remote-monitor-travis:13.0.1
      state: started
      restart_policy: unless-stopped
      hostname: nightscout.invadelabs.com
      log_driver: none
      log_options:
        max-size: "10m"
      ports:
        - "1337:1337/tcp"
      env_file: /etc/default/cgm.env
    when: ansible_host == "drew-serv"

  - name: docker; create container nexus
    docker_container:
      name: nexus
      image: sonatype/nexus3:3.23.0
      state: started
      restart_policy: unless-stopped
      hostname: nightscout.invadelabs.com
      ulimits:
        nofile:65536:65536
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/mnt/share/nexus-data:/nexus-data:z"
      ports:
        - "8081:8081/tcp"
        - "8181:8181/tcp" # docker-all group
    when: ansible_host == "drew-serv"

  - name: docker; create container mosquitto
    docker_container:
      name: mosquitto
      image: eclipse-mosquitto:1.6.10
      state: started
      restart_policy: unless-stopped
      hostname: mosquitto.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:z"
        - "/srv/mosquitto/data:/mosquitto/data:z"
      ports:
        - "1883:1883/tcp"
        - "9001:9001/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container zigbee2mqtt
    docker_container:
      name: zigbee2mqtt
      image: koenkk/zigbee2mqtt:1.14.3
      state: started
      restart_policy: unless-stopped
      hostname: zigbee2mqtt.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/zigbee2mqtt:/app/data:z"
        - "/srv/zigbee2mqtt/devices.js:/app/node_modules/zigbee-herdsman-converters/devices.js:z"
        - "/srv/zigbee2mqtt/homeassistant.js:/app/lib/extension/homeassistant.js:z"
      devices:
        - /dev/ttyACM0:/dev/ttyACM0
      env:
        TZ: "America/Denver"
    when: ansible_host == "drew-serv"

  - name: docker; create container ring-mqtt
    docker_container:
      name: ring-mqtt
      image: tsightler/ring-mqtt:3.3.0
      state: started
      restart_policy: unless-stopped
      hostname: ring-mqtt.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      env_file: /etc/default/ring-mqtt.env
      #env:
      #  DEBUG: ring-mqtt
    when: ansible_host == "drew-serv"

  - name: docker; create container homeassistant
    docker_container:
      name: homeassistant
      image: homeassistant/home-assistant:0.114.0
      state: started
      restart_policy: unless-stopped
      hostname: homeassistant.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/etc/localtime:/etc/localtime:ro"
        - "/srv/homeassistant:/config:z"
      ports:
        - "8123:8123/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container influxdb
    docker_container:
      name: influxdb
      image: influxdb:1.8.0
      state: started
      restart_policy: unless-stopped
      hostname: influxdb.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro,z"
        - "/srv/influxdb/db:/var/lib/influxdb:z"
      ports:
        - "8083:8083/tcp"
        - "8086:8086/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container grafana
    docker_container:
      name: grafana
      image: grafana/grafana:7.0.3
      state: started
      restart_policy: unless-stopped
      hostname: grafana.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      env:
        GF_SECURITY_ALLOW_EMBEDDING: "true"
      volumes:
        - "/srv/grafana:/var/lib/grafana:z"
      ports:
        - "3000:3000/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container zoneminder
    docker_container:
      name: zoneminder
      image: dlandon/zoneminder:latest # 1.34.6 ?
      state: started
      restart_policy: unless-stopped
      hostname: zoneminder.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      shm_size: 256M
      env:
        TZ: "America/Denver"
        SHMEM: "90%"
        PUID: "99"
        PGID: "100"
        INSTALL_HOOK: "1"
        INSTALL_FACE: "1"
        INSTALL_TINY_YOLO: "1"
        INSTALL_YOLO: "0"
        MULTI_PORT_START: "0"
        MULTI_PORT_END: "0"
      volumes:
        - "/srv/zoneminder:/config:z"
        - "/mnt/share/zoneminder/data:/var/cache/zoneminder:z"
      ports:
        - "7080:80/tcp"
        - "8443:443/tcp"
        - "9000:9000/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container diyhue
    docker_container:
      name: diyHue
      image: diyhue/core:master-2861b4a5bb9424314cde798165f91510ce5a7a31
      state: started
      restart_policy: unless-stopped
      hostname: diyhue.invadelabs.com
      # log_driver: json-file
      # log_options:
      #   max-size: "10m"
      env:
        IP: "{{ ansible_eth0.ipv4.address }}"
        MAC: "{{ ansible_eth0.macaddress }}"
      volumes:
        - /srv/hue-emulator:/opt/hue-emulator/export
      ports:
        - "80:80/tcp"
        - "443:443/tcp"
        - "1900:1900/udp"
        - "2100:2100/udp"
        - "1982:1982/udp"
    when: ansible_host == "drew-pine64"

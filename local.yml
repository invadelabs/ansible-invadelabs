---
- hosts: nm1
  become: true
  become_method: sudo
  # gather_facts: no
  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    nexus_repo: "https://nexus.invadelabs.com/repository"
    nexus_docker_host: "docker.invadelabs.com"
    nexus_docker_repo: "docker.invadelabs.com/" # or blank to remove
    localnet_cidr: "192.168.1.0/24"
    nrpe_allowed_hosts: "{{localnet_cidr}},172.17.0.0/16,127.0.0.1,::1"
    elasticsearch_host: "192.168.1.125" # drew-serv.nm1.invadelabs.com temp dns workaround..
    rsyslog_host: "192.168.1.125" # drew-serv.nm1.invadelabs.com temp dns workaround..
    rsyslog_port: "10514"
    mail_relay: "192.168.1.125" # drew-serv.nm1.invadelabs.com temp dns workaround..

  tasks:
  - include: playbooks/preflight_check.yml # fail if missing secrets
  - include: playbooks/initial.yml # etckeeper, fail2ban, ansible bits
  - include: playbooks/pkgs_debian.yml # apt / dpkg install items
  - include: playbooks/pip.yml # python pip packages to install
  - include: playbooks/iptables.yml # firewall
  - include: playbooks/lynis.yml # security auditing
  - include: playbooks/logging.yml # rsyslog to logstash
  - name: drew-serv tasks
    include: "{{ drew_serv_item }}"
    loop:
      - playbooks/hw_drew-serv.yml # hardware specifics
      - playbooks/samba.yml # samba
      - playbooks/nginx.yml # reverse https proxy
      - playbooks/nut_ups.yml # NUT UPS config
      - playbooks/postfix.yml # postfix _server_ config
    loop_control:
      loop_var: drew_serv_item
    when: ansible_host == "drew-serv"
  - include: playbooks/postfix_relay.yml # postfix _relay_ config
    when: (ansible_host != "drew-serv")
  - include: playbooks/docker.yml
  - include: playbooks/sshd_config.yml
  - include: playbooks/nrpe.yml # nagios nrpe agent config
  - include: playbooks/cron.yml
  - include: playbooks/ntopng.yml # ntopng network monitoring
    when: ansible_host == "drew-piv4-02"
  - include: playbooks/dashboard.yml # keyboardless/mouseless X11 dashboard
    when: ( ansible_host == "drew-pine64" ) or ( ansible_host == "drew-piv4" )

  - name: docker; rclone get drew-serv-bkup-latest.tar.xz backup
    shell: |
      rclone copyto googledrive:/Backup/Web/$(rclone lsjson --filter '- */**' --filter '+ drew-serv.*.tar.xz' --filter '- *' googledrive:/Backup/Web | jq -r '.[].Name' | sort | tail -n 1) /srv/drew-serv-bkup-latest.tar.xz
    args:
      creates: /srv/drew-serv-bkup-latest.tar.xz
    when: ansible_host == "drew-serv"
    notify:
    - docker; extract drew-serv-bkup-latest.tar.xz
    - docker; create container nexus
    - docker; create container nginx
    - docker; create container nagios4
    - docker; create container mosquitto
    - docker; create container zigbee2mqtt
    - docker; create container ring-mqtt
    - docker; create container influxdb
    - docker; create container homeassistant
    - docker; create container grafana
    - docker; create container zoneminder

## HANDLERS ##
  handlers:
  - include: playbooks/handlers.yml # start / restart systemd stuff, other things

  ## Docker Handlers
  - name: docker; extract drew-serv-bkup-latest.tar.xz
    unarchive:
      src: /srv/drew-serv-bkup-latest.tar.xz
      dest: /srv
      remote_src: yes
    when: ansible_host == "drew-serv"

  - name: docker; create container nexus
    docker_container:
      name: nexus
      image: "sonatype/nexus3:3.34.0"
      state: started
      restart_policy: unless-stopped
      hostname: nexus.invadelabs.com
      ulimits:
        nofile:65536:65536
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/mnt/share/nexus-data:/nexus-data"
      ports:
        - "8081:8081/tcp"
        - "8181:8181/tcp" # docker-all group
    when: ansible_host == "drew-serv"

  - name: docker; create container nginx
    docker_container:
      name: nginx
      image: "nginx:1.20.1-alpine"
      state: started
      restart_policy: unless-stopped
      hostname: nginx.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/etc/letsencrypt:/etc/letsencrypt:ro"
        - "/srv/nginx/conf.d:/etc/nginx/conf.d:ro"
        - "/srv/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
        - "/var/log/nginx:/var/log/nginx:rw"
      ports:
        - "80:80/tcp"
        - "443:443/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container nagios4
    docker_container:
      name: nagios4
      image: "{{ nexus_docker_repo }}jasonrivers/nagios:4.4.6" # 4.4.5
      state: started
      restart_policy: unless-stopped
      hostname: nagios.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      # XXX may need `a2enmod remoteip` in container
      # XXX unlink /etc/service/nsca
      volumes:
        - "/srv/nagios4/etc:/opt/nagios/etc"
        - "/srv/nagios4/var:/opt/nagios/var"
        - "/srv/nagios4/Custom-Nagios-Plugins:/opt/Custom-Nagios-Plugins"
        - "/srv/nagios4/nagiosgraph/var:/opt/nagiosgraph/var"
        - "/srv/nagios4/nagiosgraph/etc:/opt/nagiosgraph/etc"
        - "/srv/nagios4/main.cf:/etc/postfix/main.cf"
        - "/srv/nagios4/nagios.conf:/etc/apache2/sites-available/nagios.conf"
      env: {
        "MAIL_RELAY_HOST": "{{mail_relay}}",
        "NAGIOS_FQDN": "nagios.invadelabs.com",
        "NAGIOS_TIMEZONE": "America/Denver"
        }
      sysctls: {
          "net.ipv6.conf.all.disable_ipv6": 1
        }
      # temp dns workaround..
      etc_hosts: {
        "ha.invadelabs.com drew-serv": "192.168.1.125"
        }
      ports:
        - "8080:80/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container mosquitto
    docker_container:
      name: mosquitto
      image: "{{ nexus_docker_repo }}eclipse-mosquitto:1.6.12"
      state: started
      restart_policy: unless-stopped
      hostname: mosquitto.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"
        - "/srv/mosquitto/data:/mosquitto/data"
      ports:
        - "1883:1883/tcp"
        - "9001:9001/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container zigbee2mqtt
    docker_container:
      name: zigbee2mqtt
      image: "{{ nexus_docker_repo }}koenkk/zigbee2mqtt:1.25.2"
      state: started
      restart_policy: unless-stopped
      hostname: zigbee2mqtt.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/zigbee2mqtt:/app/data"
      devices:
        - /dev/ttyACM0:/dev/ttyACM0
      env:
        TZ: "America/Denver"
      ports:
        - "5080:8080/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container ring-mqtt
    docker_container:
      name: ring-mqtt
      image: "{{ nexus_docker_repo }}tsightler/ring-mqtt:5.0.2"
      state: started
      restart_policy: unless-stopped
      hostname: ring-mqtt.invadelabs.com
      log_driver: none # json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/ring-mqtt:/data"
    when: ansible_host == "drew-serv"

  - name: docker; create container influxdb
    docker_container:
      name: influxdb
      image: "{{ nexus_docker_repo }}influxdb:1.8.2"
      state: started
      restart_policy: unless-stopped
      hostname: influxdb.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/srv/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro"
        - "/srv/influxdb/db:/var/lib/influxdb"
      ports:
        - "8083:8083/tcp"
        - "8086:8086/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container homeassistant
    docker_container:
      name: homeassistant
      image: "{{ nexus_docker_repo }}homeassistant/home-assistant:2022.6.6"
      state: started
      restart_policy: unless-stopped
      hostname: homeassistant.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      volumes:
        - "/etc/localtime:/etc/localtime:ro"
        - "/srv/homeassistant:/config"
      # not allowed in host mode
      sysctls: {
          "net.ipv6.conf.all.disable_ipv6": 1
        }
      # network_mode: host
      ports:
        - "8123:8123/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container grafana
    docker_container:
      name: grafana
      image: "{{ nexus_docker_repo }}grafana/grafana:8.5.6"
      state: started
      restart_policy: unless-stopped
      hostname: grafana.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      env:
        GF_SECURITY_ALLOW_EMBEDDING: "true"
        GF_INSTALL_PLUGINS: "natel-discrete-panel"
      volumes:
        - "/srv/grafana:/var/lib/grafana"
      ports:
        - "3000:3000/tcp"
    when: ansible_host == "drew-serv"

  - name: docker; create container zoneminder
    docker_container:
      name: zoneminder
      image: "{{ nexus_docker_repo }}dlandon/zoneminder:latest"
      state: started
      restart_policy: unless-stopped
      hostname: zoneminder.invadelabs.com
      log_driver: json-file
      log_options:
        max-size: "10m"
      # log_driver: gelf
      # log_options:
      #   gelf-address: udp://localhost:12201
      #   tag: homeassistant
      shm_size: 1G
      env:
        TZ: "America/Denver"
        PUID: "99"
        PGID: "100"
        INSTALL_HOOK: "1"
        INSTALL_FACE: "1"
        INSTALL_TINY_YOLOV3: "1"
        INSTALL_YOLOV3: "0"
        INSTALL_TINY_YOLOV4: "1"
        INSTALL_YOLOV4: "0"
        MULTI_PORT_START: "0"
        MULTI_PORT_END: "0"
        ADVANCED_SCRIPT: "1"
      volumes:
        - "/srv/zoneminder:/config"
        - "/mnt/share/zoneminder/data:/var/cache/zoneminder"
      ports:
        - "7080:80/tcp"
        - "8443:443/tcp"
        - "9000:9000/tcp"
    when: ansible_host == "drew-serv"

  #- name: docker; create container pihole
  #  docker_container:
  #    name: pihole
  #    image: "{{ nexus_docker_repo }}pihole/pihole:v5.6"
  #    state: started
  #    restart_policy: unless-stopped
  #    hostname: pihole.invadelabs.com
  #    log_driver: json-file
  #    log_options:
  #      max-size: "10m"
  #    volumes:
  #      - "/srv/pihole/etc-pihole:/etc/pihole"
  #      - "/srv/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
  #    ports:
  #      - "{{ ansible_default_ipv4.address }}:53:53/tcp"
  #      - "{{ ansible_default_ipv4.address }}:53:53/udp"
  #      - "6080:80/tcp"
  #    env:
  #      TZ: "America/Denver"
  #    dns_servers:
  #      - 127.0.0.1
  #      - 1.1.1.1
  #  when: "'pihole' in group_names"

  ## XXX needs /srv/nut-upsd
  ## can't find device after power return and requires restart of container
  #- name: docker; create container nut-upsd
  #  docker_container:
  #    name: nut-upsd
  #    image: "{{ nexus_docker_repo }}instantlinux/nut-upsd:2.7.4-r8"
  #    state: started
  #    restart_policy: unless-stopped
  #    hostname: nut-upsd.invadelabs.com
  #    log_driver: json-file
  #    log_options:
  #      max-size: "10m"
  #    volumes:
  #      - "/etc/default/nut-upsd-password:/run/secrets/password"
  #      - "/srv/nut-upsd/upsmon.conf:/etc/nut/upsmon.conf"
  #      - "/srv/nut-upsd/notifycmd.sh:/etc/nut/notifycmd.sh"
  #      #- /dev/ups0:/dev/ups0
  #      # symlink to /de/bus/usb/*** changes after disconnect/connect (powerfail)
  #    devices:
  #      - /dev/bus/usb:/dev/bus/usb
  #    env:
  #      DRIVER: "usbhid-ups"
  #      DESCRIPTION: "CyberPower EC850LCD"
  #      #PORT: "/dev/ups0"
  #    env_file: /etc/default/nut-upsd.env
  #    ports:
  #      - "3493:3493/tcp"
  #  when: ansible_host == "drew-serv"

  #- name: docker; create container diyhue
  #  docker_container:
  #    name: diyHue
  #    image: "{{ nexus_docker_repo }}diyhue/core:latest"
  #    state: started
  #    restart_policy: unless-stopped
  #    hostname: diyhue.invadelabs.com
  #    # log_driver: json-file
  #    # log_options:
  #    #   max-size: "10m"
  #    env:
  #      IP: "{{ ansible_default_ipv4.address }}"
  #      MAC: "{{ ansible_default_ipv4.macaddress | upper }}"
  #      IP_RANGE: "125,125"
  #      # DEBUG: "true"
  #    volumes:
  #      - /srv/hue-emulator:/opt/hue-emulator/export
  #    # network_mode: host
  #    ports:
  #      - "80:80/tcp"
  #      - "443:443/tcp"
  #      - "1900:1900/udp"
  #      - "2100:2100/udp"
  #      - "1982:1982/udp"
  #  when: ansible_host == "drew-pine64"

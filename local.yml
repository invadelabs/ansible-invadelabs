---
- hosts: nm1
  become: true
  become_method: sudo
  # gather_facts: no
  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    nexus_repo: "https://nexus.invadelabs.com/repository"
    nexus_docker_hub_host: "docker-hub.invadelabs.com"
    nexus_docker_hub_repo: "docker-hub.invadelabs.com/" # or blank to remove
    nexus_docker_hosted_host: "docker-hosted.invadelabs.com"
    nexus_docker_hosted_repo: "docker-hosted.invadelabs.com/" # or blank to remove
    nexus_docker_ghcr_host: "docker-ghcr.invadelabs.com"
    nexus_docker_ghcr_repo: "docker-ghcr.invadelabs.com/" # or blank to remove
    localnet_cidr: "192.168.1.0/24"
    nrpe_allowed_hosts: "{{localnet_cidr}},172.17.0.0/16,127.0.0.1,::1"
    elasticsearch_host: "192.168.1.125" # drew-serv.nm1.invadelabs.com temp dns workaround..
    rsyslog_host: "192.168.1.125" # drew-serv.nm1.invadelabs.com temp dns workaround..
    rsyslog_port: "10514"
    mail_relay: "192.168.1.125" # drew-serv.nm1.invadelabs.com temp dns workaround..

  tasks:
    - import_tasks: playbooks/preflight_check.yml # fail if missing secrets
    - import_tasks: playbooks/initial.yml # etckeeper, fail2ban, ansible bits
    - import_tasks: playbooks/pkgs_debian.yml # apt / dpkg install items
    - import_tasks: playbooks/pip.yml # python pip packages to install
    - import_tasks: playbooks/lynis.yml # security auditing
    - import_tasks: playbooks/logging.yml # rsyslog to logstash

    # drew-serv tasks
    - name: ufw-drew-serv
      import_tasks: playbooks/ufw-drew-serv.yml
      when: ansible_host == "drew-serv"
    - import_tasks: playbooks/hw_drew-serv.yml # hardware specifics
      when: ansible_host == "drew-serv"
    - import_tasks: playbooks/samba.yml # samba
      when: ansible_host == "drew-serv"
    - import_tasks: playbooks/nginx.yml # reverse https proxy
      when: ansible_host == "drew-serv"
    - import_tasks: playbooks/nut_ups.yml # NUT UPS config
      when: ansible_host == "drew-serv"
    - import_tasks: playbooks/postfix.yml # postfix _server_ config
      when: ansible_host == "drew-serv"

    - import_tasks: playbooks/postfix_relay.yml # postfix _relay_ config
      when: (ansible_host != "drew-serv")
    - import_tasks: playbooks/docker.yml
    - import_tasks: playbooks/sshd_config.yml
    - import_tasks: playbooks/nrpe.yml # nagios nrpe agent config
    - import_tasks: playbooks/cron.yml
    - import_tasks: playbooks/ntopng.yml # ntopng network monitoring
      when: ( ansible_host == "drew-piv4-02" ) or ( ansible_host == "drew-piv5-01" )
    - import_tasks: playbooks/dashboard.yml # keyboardless/mouseless X11 dashboard
      when: "'dashboard' in group_names"

    - name: docker; rclone get drew-serv-bkup-latest.tar.xz backup  # noqa E204
      shell: |
        FILE=$(rclone lsjson
        --filter '- */**'
        --filter '+ drew-serv.*.tar.xz'
        --filter '- *' googledrive:/Backup/Web | jq -r '.[].Name' | sort | tail -n 1)
        rclone copyto googledrive:/Backup/Web/$FILE /srv/drew-serv-bkup-latest.tar.xz
      args:
        creates: /srv/drew-serv-bkup-latest.tar.xz
      when: ansible_host == "drew-serv"
      notify:
        - docker; extract drew-serv-bkup-latest.tar.xz
        - docker; create container nexus
        - docker; create container nginx
        - docker; create container nagios4
        - docker; create container mosquitto
        - docker; create container zigbee2mqtt
        - docker; create container ring-mqtt
        - docker; create container influxdb
        - docker; create container homeassistant
        - docker; create container grafana
        - docker; create container prometheus
        - docker; create container nut_exporter
        - docker; create container plex
        - docker; create container pihole
        - docker; create container minecraft
        - docker; create container minecraft-bds

## HANDLERS ##
  handlers:
    - import_tasks: playbooks/handlers.yml # start / restart systemd stuff, other things # noqa: E204

    ## Docker Handlers
    - name: docker; extract drew-serv-bkup-latest.tar.xz
      unarchive:
        src: /srv/drew-serv-bkup-latest.tar.xz
        dest: /srv
        remote_src: true
      when: ansible_host == "drew-serv"

    - name: docker; create container nexus
      docker_container:
        name: nexus
        image: "sonatype/nexus3:3.69.0"
        state: started
        restart_policy: unless-stopped
        hostname: nexus.invadelabs.com
        ulimits:
          nofile:65536:65536
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/mnt/share/nexus-data:/nexus-data"
        ports:
          - "8081:8081/tcp"
          - "8181:8181/tcp" # docker group
          - "8183:8183/tcp" # docker-hub proxy
          - "8184:8184/tcp" # docker-hosted self-made
          - "8185:8185/tcp" # docker-ghcr proxy
      when: ansible_host == "drew-serv"

    - name: docker; create container nginx
      docker_container:
        name: nginx
        image: "nginx:1.27.0-alpine"
        state: started
        restart_policy: unless-stopped
        hostname: nginx.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/etc/letsencrypt:/etc/letsencrypt:ro"
          - "/srv/nginx/conf.d:/etc/nginx/conf.d:ro"
          - "/srv/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
          - "/var/log/nginx:/var/log/nginx:rw"
        ports:
          - "80:80/tcp"
          - "443:443/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container nagios4
      docker_container:
        name: nagios4
        image: "{{ nexus_docker_hub_repo }}jasonrivers/nagios:4.5.2"
        state: started
        restart_policy: unless-stopped
        hostname: nagios.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        # XXX may need `a2enmod remoteip` in container
        # XXX unlink /etc/service/nsca
        volumes:
          - "/srv/nagios4/etc:/opt/nagios/etc"
          - "/srv/nagios4/var:/opt/nagios/var"
          - "/srv/nagios4/Custom-Nagios-Plugins:/opt/Custom-Nagios-Plugins"
          - "/srv/nagios4/nagiosgraph/var:/opt/nagiosgraph/var"
          - "/srv/nagios4/nagiosgraph/etc:/opt/nagiosgraph/etc"
          - "/srv/nagios4/main.cf:/etc/postfix/main.cf"
          - "/srv/nagios4/nagios.conf:/etc/apache2/sites-available/nagios.conf"
        env: {
          "MAIL_RELAY_HOST": "{{ mail_relay }}",
          "NAGIOS_FQDN": "nagios.invadelabs.com",
          "NAGIOS_TIMEZONE": "America/Denver"
        }
        sysctls: {
          "net.ipv6.conf.all.disable_ipv6": 1
        }
        # temp dns workaround..
        etc_hosts: {
          "ha.invadelabs.com drew-serv": "192.168.1.125"
        }
        ports:
          - "8080:80/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container mosquitto
      docker_container:
        name: mosquitto
        image: "{{ nexus_docker_hub_repo }}eclipse-mosquitto:2.0.15"
        state: started
        restart_policy: unless-stopped
        hostname: mosquitto.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"
          - "/srv/mosquitto/data:/mosquitto/data"
        ports:
          - "1883:1883/tcp"
          - "9001:9001/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container zigbee2mqtt
      docker_container:
        name: zigbee2mqtt
        image: "{{ nexus_docker_hub_repo }}koenkk/zigbee2mqtt:1.39.0"
        state: started
        restart_policy: unless-stopped
        hostname: zigbee2mqtt.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/zigbee2mqtt:/app/data"
        devices:
          - /dev/ttyACM0:/dev/ttyACM0
        env:
          TZ: "America/Denver"
        ports:
          - "5080:8080/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container ring-mqtt
      docker_container:
        name: ring-mqtt
        image: "{{ nexus_docker_hub_repo }}tsightler/ring-mqtt:5.6.7"
        state: started
        restart_policy: unless-stopped
        hostname: ring-mqtt.invadelabs.com
        log_driver: none # json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/ring-mqtt:/data"
      when: ansible_host == "drew-serv"

    - name: docker; create container influxdb
      docker_container:
        name: influxdb
        image: "{{ nexus_docker_hub_repo }}influxdb:1.8.10"
        state: started
        restart_policy: unless-stopped
        hostname: influxdb.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro"
          - "/srv/influxdb/db:/var/lib/influxdb"
        ports:
          - "8083:8083/tcp"
          - "8086:8086/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container homeassistant
      docker_container:
        name: homeassistant
        image: "{{ nexus_docker_hub_repo }}homeassistant/home-assistant:2024.7.2"
        state: started
        restart_policy: unless-stopped
        hostname: homeassistant.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/etc/localtime:/etc/localtime:ro"
          - "/srv/homeassistant:/config"
          - "/mnt/share/homeassistant:/config/backups"
        # not allowed in host mode
        sysctls: {
          "net.ipv6.conf.all.disable_ipv6": 1
        }
        # temp dns workaround..
        etc_hosts: {
          "plex.invadelabs.com": "{{ ansible_default_ipv4.address }}"
        }
        # network_mode: host
        ports:
          - "8123:8123/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container grafana
      docker_container:
        name: grafana
        image: "{{ nexus_docker_hub_repo }}grafana/grafana:11.0.1"
        state: started
        restart_policy: unless-stopped
        hostname: grafana.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        env:
          GF_SECURITY_ALLOW_EMBEDDING: "true"
          GF_INSTALL_PLUGINS: "natel-discrete-panel"
          GF_ALLOW_LOADING_UNSIGNED_PLUGINS: "natel-discrete-panel"
        volumes:
          - "/srv/grafana:/var/lib/grafana"
        ports:
          - "3000:3000/tcp"
      when: ansible_host == "drew-serv"

#    - name: docker; create container zoneminder
#      docker_container:
#        name: zoneminder
#        image: "{{ nexus_docker_hub_repo }}dlandon/zoneminder:latest"
#        state: started
#        restart_policy: unless-stopped
#        hostname: zoneminder.invadelabs.com
#        log_driver: json-file
#        log_options:
#          max-size: "10m"
#        # log_driver: gelf
#        # log_options:
#        #   gelf-address: udp://localhost:12201
#        #   tag: homeassistant
#        shm_size: 1G
#        env:
#          TZ: "America/Denver"
#          PUID: "99"
#          PGID: "100"
#          INSTALL_HOOK: "1"
#          INSTALL_FACE: "1"
#          INSTALL_TINY_YOLOV3: "1"
#          INSTALL_YOLOV3: "0"
#          INSTALL_TINY_YOLOV4: "1"
#          INSTALL_YOLOV4: "0"
#          MULTI_PORT_START: "0"
#          MULTI_PORT_END: "0"
#          ADVANCED_SCRIPT: "1"
#        volumes:
#          - "/srv/zoneminder:/config"
#          - "/mnt/share/zoneminder/data:/var/cache/zoneminder"
#        ports:
#          - "7080:80/tcp"
#          - "8443:443/tcp"
#          - "9000:9000/tcp"
#      when: ansible_host == "drew-serv"

    - name: docker; create container prometheus
      docker_container:
        name: prometheus
        image: "{{ nexus_docker_hub_repo }}prom/prometheus:v2.53.0"
        command: [
          "--config.file=/etc/prometheus/prometheus.yml",
          "--storage.tsdb.path=/prometheus",
          "--web.console.libraries=/usr/share/prometheus/console_libraries",
          "--web.console.templates=/usr/share/prometheus/consoles",
          "--storage.tsdb.retention.time=5y"
        ]
        state: started
        restart_policy: unless-stopped
        hostname: prometheus.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/prometheus:/etc/prometheus"
          - "/srv/prometheus-data:/prometheus"
        ports:
          - "9090:9090/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container nut_exporter
      docker_container:
        name: nut_exporter
        image: "{{ nexus_docker_hub_repo }}druggeri/nut_exporter:2.5.2"
        state: started
        restart_policy: unless-stopped
        hostname: nut_exporter.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        ports:
          - "9199:9199/tcp"
        env:
          NUT_EXPORTER_SERVER: "{{ ansible_default_ipv4.address }}"
      when: ansible_host == "drew-serv"

    - name: docker; create container plex
      docker_container:
        name: plex
        image: "{{ nexus_docker_hub_repo }}linuxserver/plex:1.40.4"
        state: started
        restart_policy: unless-stopped
        hostname: plex.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        env_file: /etc/default/plex.env
        env:
          PUID: "1000"
          PGID: "1000"
          TZ: "America/Denver"
          VERSION: "docker"
        volumes:
          - "/mnt/share/plex/library:/config"
          - "/mnt/share/media/tvseries:/tv:ro"
          - "/mnt/share/media/movies:/movies:ro"
          - "/mnt/share/media/music:/music-youtube-dl:ro"
          - "/mnt/share/Music:/Music:ro"
        devices:
          - /dev/dri:/dev/dri
        ports:
          - "32400:32400/tcp"
          - "1900:1900/udp"
          - "3005:3005/tcp"
          - "5353:5353/udp"
          - "8324:8324/tcp"
          - "32410:32410/udp"
          - "32412:32412/udp"
          - "32413:32413/udp"
          - "32414:32414/udp"
          - "32469:32469/tcp"
      when: ansible_host == "drew-serv"

    - name: docker; create container pihole
      docker_container:
        name: pihole
        image: "{{ nexus_docker_hub_repo }}pihole/pihole:2024.07.0"
        state: started
        restart_policy: unless-stopped
        hostname: pihole.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/pihole/etc-pihole:/etc/pihole"
          - "/srv/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
        ports:
          - "{{ ansible_default_ipv4.address }}:53:53/tcp"
          - "{{ ansible_default_ipv4.address }}:53:53/udp"
          - "6080:80/tcp"
        env:
          TZ: "America/Denver"
        dns_servers:
          - 127.0.0.1
          - 1.1.1.1
      when: "'pihole' in group_names"

    - name: docker; create container minecraft
      docker_container:
        name: minecraft
        image: "{{ nexus_docker_hub_repo }}itzg/minecraft-server:2024.6.1-java21"
        state: started
        restart_policy: unless-stopped
        hostname: mc.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/mc-data:/data"
        ports:
          - "25565:25565/tcp"
          - "25575:25575/tcp"
        env:
          EULA: "TRUE"
          MEMORY: "8G"
          MOTD: "Monsters off, cheats on, txt msg for op"
          SPAWN_MONSTERS: "false"
          SERVER_NAME: "Drew's Minecraft Server"
          MAX_PLAYERS: "5"
          ALLOW_CHEATS: "TRUE"
          MODE: "survival"
      when: ansible_host == "drew-serv"

    - name: docker; create container minecraft-bds
      docker_container:
        name: minecraft-bds
        image: "{{ nexus_docker_hub_repo }}itzg/minecraft-bedrock-server"
        state: started
        restart_policy: unless-stopped
        hostname: mc-bds.invadelabs.com
        log_driver: json-file
        log_options:
          max-size: "10m"
        volumes:
          - "/srv/mc-bds-data:/data"
        ports:
          - "19132:19132/udp"
        env:
          EULA: "TRUE"
          MEMORY: "8G"
          MOTD: "Monsters off, cheats on, txt msg for op"
          SPAWN_MONSTERS: "false"
          SERVER_NAME: "Drew's BDS Minecraft Server"
          MAX_PLAYERS: "5"
          ALLOW_CHEATS: "TRUE"
          MODE: "survival"
      when: ansible_host == "drew-serv"

    # # XXX needs /srv/nut-upsd
    # # can't find device after power return and requires restart of container
    # - name: docker; create container nut-upsd
    #   docker_container:
    #     name: nut-upsd
    #     image: "{{ nexus_docker_hub_repo }}instantlinux/nut-upsd:2.7.4-r8"
    #     state: started
    #     restart_policy: unless-stopped
    #     hostname: nut-upsd.invadelabs.com
    #     log_driver: json-file
    #     log_options:
    #       max-size: "10m"
    #     volumes:
    #       - "/etc/default/nut-upsd-password:/run/secrets/password"
    #       - "/srv/nut-upsd/upsmon.conf:/etc/nut/upsmon.conf"
    #       - "/srv/nut-upsd/notifycmd.sh:/etc/nut/notifycmd.sh"
    #       #- /dev/ups0:/dev/ups0
    #       # symlink to /de/bus/usb/*** changes after disconnect/connect (powerfail)
    #     devices:
    #       - /dev/bus/usb:/dev/bus/usb
    #     env:
    #       DRIVER: "usbhid-ups"
    #       DESCRIPTION: "CyberPower EC850LCD"
    #       #PORT: "/dev/ups0"
    #     env_file: /etc/default/nut-upsd.env
    #     ports:
    #       - "3493:3493/tcp"
    #   when: ansible_host == "drew-serv"

    # - name: docker; create container diyhue
    #   docker_container:
    #     name: diyHue
    #     image: "{{ nexus_docker_hub_repo }}diyhue/core:latest"
    #     state: started
    #     restart_policy: unless-stopped
    #     hostname: diyhue.invadelabs.com
    #     # log_driver: json-file
    #     # log_options:
    #     #   max-size: "10m"
    #     env:
    #       IP: "{{ ansible_default_ipv4.address }}"
    #       MAC: "{{ ansible_default_ipv4.macaddress | upper }}"
    #       IP_RANGE: "125,125"
    #       # DEBUG: "true"
    #     volumes:
    #       - /srv/hue-emulator:/opt/hue-emulator/export
    #     # network_mode: host
    #     ports:
    #       - "80:80/tcp"
    #       - "443:443/tcp"
    #       - "1900:1900/udp"
    #       - "2100:2100/udp"
    #       - "1982:1982/udp"
    #   when: ansible_host == "drew-serv"

    # - name: docker; create container elasticsearch-exporter
    #   docker_container:
    #     name: elasticsearch-exporter
    #     image: "{{ nexus_docker_hub_repo }}prometheuscommunity/elasticsearch-exporter:v1.3.0"
    #     command: [
    #       "--es.uri={{ elasticsearch_host }}:9200"
    #     ]
    #     state: started
    #     restart_policy: unless-stopped
    #     hostname: elasticsearch-exporter.invadelabs.com
    #     log_driver: json-file
    #     log_options:
    #       max-size: "10m"
    #     ports:
    #       - "9114:9114/tcp"
    #   when: ansible_host == "drew-serv"

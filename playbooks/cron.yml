---
- name: cron; create "PATH=/usr/local/bin:/usr/bin:/bin" on top of crontab
  cron:
    name: PATH
    env: true
    user: root
    job: /usr/local/bin:/usr/bin:/bin

- name: cron; check_lynis.sh
  cron:
    name: check_lynis.sh
    minute: "57"
    hour: "22"
    weekday: "6"
    user: root
    job: /root/scripts/check_lynis.sh drew@invadelabs.com
  when: "'rpi-cluster' not in group_names"

- name: cron; ansible-pull
  cron:
    name: ansible-pull
    minute: "30"
    hour: "*/2"
    user: root
    job: >-
      ansible-pull -U https://github.com/invadelabs/ansible-invadelabs.git
      -o -C main -i hosts -l {{ ansible_host }} | systemd-cat -t ansible-pull

- name: cron; logwatch weekly
  cron:
    name: logwatch weekly
    minute: "0"
    hour: "23"
    weekday: "6"
    user: root
    job: /usr/sbin/logwatch --output mail
  # when: "'rpi-cluster' not in group_names"

- name: cron; cron check_letsencrypt.sh
  cron:
    name: check_letsencrypt.sh
    minute: "15"
    hour: "23"
    user: root
    job: /root/scripts/check_letsencrypt.sh
  when: ansible_host == "drew-serv"

- name: cron; check_ddns.sh
  cron:
    name: check_ddns.sh
    minute: "*/5"
    user: root
    job: /root/scripts/check_ddns.sh nm.invadelabs.com > /dev/null 2>&1
  when: ansible_host == "drew-serv"

- name: cron; check_docker.sh
  cron:
    name: check_docker.sh
    minute: "*/1"
    user: root
    job: /root/scripts/check_docker.sh "nagios4" > /dev/null 2>&1
  when: ansible_host == "drew-serv"

- name: cron; gen_sitemap.sh
  cron:
    name: gen_sitemap.sh
    minute: "0"
    hour: "23"
    weekday: "6"
    user: root
    job: /root/scripts/gen_sitemap.sh
  when: ansible_fqdn == 'invadelabs.com'

- name: cron; gdrive_backup.sh drew-serv.invadelabs.com
  cron:
    name: gdrive_backup.sh
    minute: "0"
    hour: "23"
    user: root
    job: >-
      /root/scripts/gdrive_backup.sh -a drew-serv -f googledrive:/Backup/Web
      -l /root/scripts/gdrive_drewserv.txt -s
  when: ansible_host == "drew-serv"

- name: cron; gdrive_backup.sh invadelabs.com
  cron:
    name: gdrive_backup.sh
    minute: "0"
    hour: "23"
    user: root
    job: >-
      /root/scripts/gdrive_backup.sh -a invadelabs.com -f googledrive:/Backup/Web
      -l /root/scripts/gdrive_invadelabs.com.txt -s
  when: ansible_fqdn == 'invadelabs.com'

# - name: cron; Add cron certbot
#   cron:
#     name: certbot
#     minute: 0
#     hour: 3,15
#     user: root
#     job: certbot --apache renew --quiet

- name: cron; `hostname invadelabs.com`
  cron:
    name: hostname invadelabs.com
    minute: "0"
    user: root
    job: hostname invadelabs.com
  when: ansible_fqdn == 'invadelabs.com'

- name: cron; autossh
  cron:
    name: autossh
    special_time: reboot
    user: root
    job: >-
      autossh -f -N -R 11514:localhost:10514 -R 5001:localhost:5000
      -o "StrictHostKeyChecking=no" -o "PubkeyAuthentication=yes"
      -o "PasswordAuthentication=no"
      -i /home/drew/.ssh/tunnel_2020.05.17 drew@srv.invadelabs.com
  when: ansible_host == "drew-serv"

- name: cron; restart autossh tunnel
  cron:
    name: restart autossh tunnel
    minute: "30"
    hour: "*/6"
    user: root
    job: >-
      kill -9 $(ps aux | grep "/usr/bin/[s]sh " | grep invadelabs.com | awk -F" " '{print $2}')
  when: ansible_host == "drew-serv"

# - name: cron; disable wifi # XXX temp workaround
#   cron:
#     name: disable wifi
#     special_time: reboot
#     user: root
#     job: sleep 30 && nmcli dev set wlo1 managed no && /usr/sbin/rfkill block 0
#   when: ansible_host == "drew-serv"

# - name: cron; docker start pihole # XXX temp workaround
#   cron:
#     name: docker start pihole
#     special_time: reboot
#     user: root
#     job: sleep 30; docker start pihole >/dev/null
#   when: ansible_host == "drew-serv"

# XXX wireless-crda / crda package missing in jammy armbian?
- name: cron; set wifi region u22.04 pine64
  cron:
    name: set wifi region u22.04 pine64
    special_time: reboot
    user: root
    job: /usr/sbin/iw reg set US
  when: ansible_host == "drew-pine64"

- name: cron; fail2ban socket perms # XXX temp workaround
  cron:
    name: fail2ban socket perms
    special_time: reboot
    user: root
    job: >-
      sleep 30 && chmod 660 /run/fail2ban/fail2ban.sock
      && chown root:nagios /run/fail2ban/fail2ban.sock
  when: ansible_host == "drew-serv"

# takes >3 minute to run
- name: cron; snapshot elasticsearch
  cron:
    name: snapshot elasticsearch
    minute: "45"
    hour: "0"
    user: root
    job: >-
      D=$(date '+\%Y\%m\%d\%H\%M\%S\%z')
      curl -sS -XPUT {{ elasticsearch_host }}:9200/_snapshot/my_backup/snapshot_$D?wait_for_completion=true |
      systemd-cat -t "elasticsearch-snapshot"
  when: ansible_host == "drew-serv"

# for a full backup (~1GB) >4mins to tar.xz, 30mins to upload
- name: cron; backup elasticsearch snapshot
  cron:
    name: backup elasticsearch snapshot
    minute: "50"
    hour: "0"
    user: root
    job: >-
      D=$(date '+\%Y\%m\%d\%H\%M\%S\%z');
      cd /mnt/share/bkup &&
      tar -I "pxz -T 0" --listed-incremental=docker-elk.snar -cf docker-elk.$D.tar.xz docker-elk/ &&
      rclone copy -v --bwlimit 400k
      --filter "+ docker-elk.*.tar.xz"
      --filter "- *" . googledrive:/Backup/elasticsearch 2>&1 | systemd-cat -t "elasticsearch-upload"
  when: ansible_host == "drew-serv"

# cleanup snapshots on the first of the month
# for a full backup >30mins to tar, 90mins to upload
- name: cron; cleanup elasticsearch snapshots
  cron:
    name: cleanup elasticsearch snapshot
    minute: "0"
    hour: "0"
    day: "1"
    # month: */4
    user: root
    job: >-
      for i in $(curl -sS -f {{ elasticsearch_host }}:9200/_snapshot/my_backup/* | jq -r '.[]| .[]| .snapshot'); do
      curl -sS -XDELETE {{ elasticsearch_host }}:9200/_snapshot/my_backup/$i |
      systemd-cat -t es-backup-cleanup; done
  when: ansible_host == "drew-serv"

# delete old snapshots tar balls on the first of the month
- name: cron; delete elasticsearch snapshot tars
  cron:
    name: delete elasticsearch snapshot tars
    minute: "0"
    hour: "0"
    day: "1"
    # month: */4
    user: root
    job: >-
      if ls /mnt/share/bkup/docker-elk.*; then
      rm -fv /mnt/share/bkup/docker-elk.*; fi |
      systemd-cat -t es-backup-cleanup
  when: ansible_host == "drew-serv"

# # run cron to email error messages
# - name: cron; email errors from elasticsearch
#   cron:
#     name: email errors from elasticsearch
#     minute: "30"
#     hour: "18"
#     user: root
#     job: /root/scripts/es_errors.sh drew@invadelabs.com
#   when: ansible_host == "drew-serv"
